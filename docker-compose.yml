services:
  api-postgres:
    container_name: api-postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: "TicTacToe"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "P@ssw0rd"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - api-data:/var/lib/postgresql/data

  chat-history-postgres:
    container_name: chat-history-postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: "SupportChat"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "P@ssw0rd"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - 5434:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - chat-data:/var/lib/postgresql/data

  frontend:
    build:
      context: ../../mouse-front/mouse-frontend-app
      dockerfile: Dockerfile
    ports:
      - 5173:5173
    depends_on:
      - main-api #:
        #condition: service_healthy

  main-api:
    build:
      context: ./Itis.MyTrainings.Api
      dockerfile: Dockerfile
    ports:
      - 8080:80
    environment:
      - API_KEY=asdasdasdasdasdasdaasda212
    depends_on:
      api-postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/health"]

  chat-history-service:
    build:
      context: ./Itis.MyTrainings.ChatHistoryService
      dockerfile: Dockerfile    
    environment:
      - API_KEY=asdasdasdasdasdasdaasda212
    ports:
      - 8081:80
    depends_on:
      chat-history-postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/health"]

  storage-service:
    build:
      context: ./Itis.MyTrainings.StorageService
      dockerfile: Dockerfile        
    ports:
      - 8082:80
    depends_on:
      chat-history-service:
        condition: service_started
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:80/health"]
    

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    environment:
        RABBITMQ_DEFAULT_USER: big
        RABBITMQ_DEFAULT_PASS: P@ssw0rd
    ports:
        - 5672:5672
        - 15672:15672
    healthcheck:
          test: ["CMD", "rabbitmq-diagnostics", "check_running"]
          interval: 10s
          timeout: 5s
          retries: 5

  minio:
    image: quay.io/minio/minio
    container_name: asd.minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/minio/data:/data
    environment:
      MINIO_ROOT_USER: "asd"
      MINIO_ROOT_PASSWORD: "qweASD123"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"] # Check the live health endpoint
      interval: 30s                # Interval between health checks
      timeout: 10s                 # Time to wait for the health check to complete
      retries: 3   
    

volumes:
  api-data:  
  chat-data:
  minio-data:
      
networks:
  my_custom_network:
